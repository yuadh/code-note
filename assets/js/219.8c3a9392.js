(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{530:function(t,s,r){"use strict";r.r(s);var a=r(7),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"树与二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树与二叉树"}},[t._v("#")]),t._v(" 树与二叉树")]),t._v(" "),s("h2",{attrs:{id:"基本概念和语术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念和语术"}},[t._v("#")]),t._v(" 基本概念和语术")]),t._v(" "),s("p",[s("strong",[t._v("树(Tree)")]),t._v(" 是 n 个节点的有限集合，当 n=0 时称为空树")]),t._v(" "),s("ul",[s("li",[t._v("当有且只有一个特定的节点时，称为根")]),t._v(" "),s("li",[t._v("当 n>1 时，其余节点可分为 m 个互不相交的有限集T1,T2,T3...，其中每个集合本身又是一颗树，并称为根的子树")])]),t._v(" "),s("p",[t._v("树是递归的，是一种递归的数据结构")]),t._v(" "),s("ul",[s("li",[t._v("树的根节点没有前驱，除根节点外的所有节点只有一个前驱")]),t._v(" "),s("li",[t._v("树中所有节点可以有零个或多个后继")])])])}),[],!1,null,null,null);s.default=n.exports}}]);